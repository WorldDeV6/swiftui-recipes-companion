---
title: "Side Menu"
description: "Create a side menu (or navigation drawer, as it's known on Android), in SwiftUI."
author: "Gordan"
url: "https://swiftuirecipes.com/blog/side-menu-in-swiftui"
image: "https://swiftuirecipes.com/user/pages/01.blog/side-menu-in-swiftui/ezgif-6-0114801af484.gif"
updatedAt: "2021-07-28T13:00:00"
minSwiftUIVersion: 1
---
struct SideMenuItem: Hashable {
  let title: String
  let action: () -> Void // Triggers when the item is tapped

  static func == (lhs: SideMenuItem, rhs: SideMenuItem) -> Bool {
    lhs.title == rhs.title && lhs.imageName == rhs.imageName
  }

  func hash(into hasher: inout Hasher) {
    hasher.combine(title)
    hasher.combine(imageName)
  }
}

struct SideMenu<MenuContent: View>: ViewModifier {
  @Binding var isShowing: Bool
  private let menuContent: () -> MenuContent

  public init(isShowing: Binding<Bool>,
       @ViewBuilder menuContent: @escaping () -> MenuContent) {
    _isShowing = isShowing
    self.menuContent = menuContent
  }

  func body(content: Content) -> some View {
    let drag = DragGesture().onEnded { event in
      if event.location.x < 200 && abs(event.translation.height) < 50 && abs(event.translation.width) > 50 {
        withAnimation {
          self.isShowing = event.translation.width > 0
        }
      }
    }
    return GeometryReader { geometry in
      ZStack(alignment: .leading) {
        content
          .disabled(isShowing)
          .frame(width: geometry.size.width, height: geometry.size.height)
          .offset(x: self.isShowing ? geometry.size.width / 2 : 0)

          menuContent()
            .frame(width: geometry.size.width / 2)
            .transition(.move(edge: .leading))
            .offset(x: self.isShowing ? 0 : -geometry.size.width / 2)
      }.gesture(drag)
    }
  }
}

extension View {
  func sideMenu<MenuContent: View>(
      isShowing: Binding<Bool>,
      @ViewBuilder menuContent: @escaping () -> MenuContent
  ) -> some View {
    self.modifier(SideMenu(isShowing: isShowing, menuContent: menuContent))
  }
}

/*
// Sample usage

struct SideMenuTest: View {
  @State private var showSideMenu = false

  var body: some View {
    NavigationView {
       List(1..<6) { index in
         Text("Item \(index)")
       }.blueNavigation
         .navigationBarTitle("Dashboard", displayMode: .inline)
         .navigationBarItems(leading: (
           Button(action: {
             withAnimation {
               self.showSideMenu.toggle()
             }
           }) {
             Image(systemName: "line.horizontal.3")
               .imageScale(.large)
           }
         ))
      }.sideMenu(isShowing: $showSideMenu) {
        VStack(alignment: .leading) {
          Button(action: {
            withAnimation {
              self.showSideMenu = false
            }
          }) {
            HStack {
              Image(systemName: "xmark")
                .foregroundColor(.white)
              Text("close menu")
                .foregroundColor(.white)
                .font(.system(size: 14))
                .padding(.leading, 15.0)
            }
          }.padding(.top, 20)
            Divider()
              .frame(height: 20)
            Text("Sample item 1")
              .foregroundColor(.white)
             Text("Sample item 2")
               .foregroundColor(.white)
             Spacer()
           }.padding()
             .frame(maxWidth: .infinity, alignment: .leading)
             .background(Color.black)
             .edgesIgnoringSafeArea(.all)
      }
  }
}
*/