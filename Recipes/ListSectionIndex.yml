---
title: "List Section Index Title"
description: "Add section index with titles to a SwiftUI List."
author: "Gordan"
url: "https://swiftuirecipes.com/blog/swiftui-list-section-index-title"
image: "https://swiftuirecipes.com/user/pages/01.blog/swiftui-list-section-index-title/preview.gif"
updatedAt: "2021-07-28T13:00:00"
minSwiftUIVersion: 1
---
struct SectionIndex<ID, TitleContent>: ViewModifier where ID : Hashable, TitleContent : View {
  let proxy: ScrollViewProxy
  let sections: [ID]
  @ViewBuilder let titleContent: (ID, Bool) -> TitleContent

  @State private var selection: ID? = nil

  func body(content: Content) -> some View {
    ZStack {
      content
      // TouchEnterExitReader allows for tracking of finger movement over index shortcuts
      TouchEnterExitReader(ID.self,
                           onEnter: { id in
        selection = id
        withAnimation {
          proxy.scrollTo(id)
        }
      },
                           onExit: { id in
        selection = nil
      }) { touchEnterExitProxy in
        HStack {
          Spacer() // right-align the index
          VStack { // the index itself
            ForEach(sections, id: \.self) { section in
              titleContent(section, selection == section)
                .touchEnterExit(id: section, proxy: touchEnterExitProxy)
                .onTapGesture {
                  withAnimation {
                    proxy.scrollTo(section)
                  }
                }
              }
            }
          }
      }
    }
  }
}

extension View {
  func sectionIndex<ID, TitleContent>(proxy: ScrollViewProxy,
                                      sections: [ID],
                                      @ViewBuilder titleContent: @escaping (ID, Bool) -> TitleContent) -> some View
  where ID : Hashable, TitleContent : View {
    self.modifier(SectionIndex(proxy: proxy, sections: sections, titleContent: titleContent))
  }
}

extension View {
  func firstLetterSectionIndex(proxy: ScrollViewProxy, sections: [String]) -> some View {
    self.modifier(SectionIndex(proxy: proxy, sections: sections, titleContent: { title, isSelected in
      Text(title.prefix(1))
        .font(.system(size: isSelected ? 32 : 16))
        .fontWeight(isSelected ? .bold : .regular)
        .foregroundColor(.blue)
        .padding(.trailing, 3)
    }))
  }
}

/*
Sample usage

struct SectionIndexTest: View {
  let contacts = [
    "A": ["Anne", "Alfred", "Allie"],
    "B": ["Beth", "Bert", "Bart"],
    "C": ["Chad"],
    "D": ["Don", "Dona", "Dierdre"],
    "E": ["Euphrasius", "Elmo"],
    "G": ["Gordan", "Gordon", "Goran"],
    "H": ["Herb", "Herbert", "Hertie"],
    "I": ["Ion"],
    "K": ["Kurt", "Kurtrus", "Kent"],
    "O": ["Oprah", "Oswald"],
    "P": ["Peter", "Percy", "Princess"],
    "R": ["Rand", "Ruth", "Rudy"],
    "S": ["Steve", "Stephen", "Stephanie"],
    "T": ["Tyrone", "Trevor", "Tundra"],
    "W": ["Wilfred", "Wynonna"],
  ]

  var body: some View {
    let sections = Array(contacts.keys.sorted())
    ScrollViewReader { proxy in
      List {
        ForEach(sections, id: \.self) { letter in
          Section(header: Text(letter)) {
            ForEach(contacts[letter]!, id: \.self) { contact in
              Text(contact)
            }
          }
          .id(letter) // necessary for ScrollViewProxy to work
        }
      }
      .firstLetterSectionIndex(proxy: proxy, sections: sections) // as simple as this
    }
  }
}
*/