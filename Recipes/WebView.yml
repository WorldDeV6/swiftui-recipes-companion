---
title: "WebView"
description: "Implement a WebView in SwiftUI by wrapping WKWebView."
author: "Gordan"
url: "https://github.com/globulus/swiftui-webview"
image: "https://github.com/globulus/swiftui-webview/blob/main/Images/preview_ios.gif?raw=true"
updatedAt: "2021-07-28T13:00:00"
minSwiftUIVersion: 1
---
public enum WebViewAction {
  case idle, // idle is always needed as actions need an empty state
     load(URLRequest),
     reload,
     goBack,
     goForward
}

public struct WebViewState {
  public internal(set) var isLoading: Bool
  public internal(set) var pageTitle: String?
  public internal(set) var error: Error?
  public internal(set) var canGoBack: Bool
  public internal(set) var canGoForward: Bool

  public static let empty = WebViewState(isLoading: false,
                                         pageTitle: nil,
                                         error: nil,
                                         canGoBack: false,
                                         canGoForward: false)
}

public class WebViewCoordinator: NSObject {
  private let webView: WebView

  init(webView: WebView) {
    self.webView = webView
  }

  // Convenience method, used later
  func setLoading(_ isLoading: Bool, error: Error? = nil) {
    var newState =  webView.state
    newState.isLoading = isLoading
    if let error = error {
      newState.error = error
    }
    webView.state = newState
  }
}

extension WebViewCoordinator: WKNavigationDelegate {
  public func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
    setLoading(false)

    webView.evaluateJavaScript("document.title") { (response, error) in
      var newState = self.webView.state
      newState.pageTitle = response as? String
      self.webView.state = newState
    }
  }

  public func webViewWebContentProcessDidTerminate(_ webView: WKWebView) {
    setLoading(false)
  }

  public func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {
    setLoading(false, error: error)
  }

  public func webView(_ webView: WKWebView, didCommit navigation: WKNavigation!) {
    setLoading(true)
  }

  public func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
    var newState = self.webView.state
    newState.isLoading = true
    newState.canGoBack = webView.canGoBack
    newState.canGoForward = webView.canGoForward
    self.webView.state = newState
  }
}

public struct WebView: UIViewRepresentable {
  @Binding var action: WebViewAction
  @Binding var state: WebViewState

  public init(action: Binding<WebViewAction>,
              state: Binding<WebViewState>) {
    _action = action
    _state = state
  }

  public func makeCoordinator() -> WebViewCoordinator {
    WebViewCoordinator(webView: self)
  }

  public func makeUIView(context: Context) -> WKWebView {
    let preferences = WKPreferences()
    preferences.javaScriptEnabled = true

    let configuration = WKWebViewConfiguration()
    configuration.preferences = preferences

    let webView = WKWebView(frame: CGRect.zero, configuration: configuration)
    webView.navigationDelegate = context.coordinator
    webView.allowsBackForwardNavigationGestures = true
    webView.scrollView.isScrollEnabled = true
    return webView
  }

  public func updateUIView(_ uiView: WKWebView, context: Context) {
    switch action {
    case .idle:
      break
    case .load(let request):
      uiView.load(request)
    case .reload:
      uiView.reload()
    case .goBack:
      uiView.goBack()
    case .goForward:
      uiView.goForward()
    }
    action = .idle // this is important to prevent never-ending refreshes
  }
}

/*
// Sample usage

struct WebViewTest: View {
  @State private var action = WebViewAction.idle
  @State private var state = WebViewState.empty
  @State private var address = "https://www.google.com"

  var body: some View {
    NavigationView {
      VStack {
        navigationToolbar
        errorView
        Divider()
        WebView(action: $action,
                  state: $state)
         Spacer()
      }
      .navigationBarTitle(state.pageTitle ?? "Load a page", displayMode: .inline)
      .navigationBarItems(
        leading: Button(action: {
          action = .goBack
        }) {
          if state.canGoBack {
            Image(systemName: "chevron.left")
              .imageScale(.large)
          }
        },
        trailing: Button(action: {
          action = .goForward
        }) {
          if state.canGoForward {
            Image(systemName: "chevron.right")
              .imageScale(.large)
          }
        })
    }
  }

  private var navigationToolbar: some View {
    HStack(spacing: 10) {
      TextField("Address", text: $address)
      if state.isLoading {
        ProgressView()
          .progressViewStyle(CircularProgressViewStyle())
      }
      Spacer()
      Button("Go") {
        if let url = URL(string: address) {
          action = .load(URLRequest(url: url))
        }
      }
      Button(action: {
        action = .reload
      }) {
        Image(systemName: "arrow.counterclockwise")
          .imageScale(.large)
      }
    }.padding()
  }

  private var errorView: some View {
    Group {
      if let error = state.error {
        Text(error.localizedDescription)
          .foregroundColor(.red)
      }
    }
  }
}
*/
